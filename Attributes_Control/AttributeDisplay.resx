<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnRouteTo.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        312W7rEavh0o901QWPsp7YPUD+OX3aN1Dk/1zuFU2AumtJnkRjOhmnAoqZB9lMjCyJRCJGZza9imTlY0
        xEpH3wsW8iUsT0w8w1hp6UYp6Z6fyDp6V9oly+1iLchSC6a/OsX7OdnOE9yvTnf95WLv364OWftOu0Us
        1LStHHFSHXfRnvdasQvWBWdQ+NHoJOQoesvG5pHeQu0ic1ivODYunxj5qobUVDTISoZX1TtM4HCC6/UC
        pqyFLn5LcXro7v73nnUQsiWekJDtOsH9Odm2o227LLv+fK7Xxncy+qXC0kW+/9b8oTuqc55a/xSdbZDO
        NYoqbWbQ9XALVqGUpS1kPPqnsO4xbFQOW95CatogYHsGWMkIqalR8Bi2cYTEs/IWuqAeZFhkqa4+rLPE
        M4F4mS/S8oUa7E+3H/sHsi2H23ac6DQ9IzloO3zEYXL39ek9N+f326kOO2mt/Jav+epsAim7YCb0BRmS
        Ic9Zjxg2OIP1iGUdwti7kYTsTQObXbU6dwAIzuEEgxSjtUNKyBrbCdnreqq0ieKLqY5efbtE1y4hZDwh
        IYvImNx6pO3nZJssOFuPdeywlOy/OWxuP/nt1endVvN7bFRmdzRXHi1ffqiz8qOsAxiMRNQlKJ11jSS9
        7xLJ2j1hHULJ8MyvY7MqSE3hGbBwhDBltEtZQS+ZUFDN0mY6r5ZCQbkiql2ix+ouEK/wRYQM1QxLn9xs
        wfk5mYk5Z/ORjn03+lLfLDgEy7+5PPXXq3O7byj33tLYBq7E5lLxr2nMGtf9yBh0i2atA1ibIHK0DWbt
        gtmwl6T982oJWVc/YeruJ4J5fDFpR4wMVBNkuTXUy0p9SxclkOixp+KJVngGMrxDPI4fA8ZHyDYd6fjy
        LPFs15mxry5MfXN57m9WyqicFSu/FesA3RVfyjeZySon1bwVxF7xYa/6stf8iG4FkwGRWc5ibcAIRfnA
        1NVHEFHQlm5iGJwmY7OJzjOQNXeioAYy4Qq3B+2v5faog5LGP0725emu7LL5Cx7j20+POT1dOOOhOOGq
        cghZepKhSy2iChtphMaEOSlnn5eTVkPjW/mzlx6yNoFsWjGb+IYtbyXegMzYW8ZjWQuxuaQJYvJq6axy
        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
        5kBHUV/yAAAAAElFTkSuQmCC
</value>
  </data>
</root>